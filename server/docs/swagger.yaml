basePath: /
definitions:
  config.Captcha:
    properties:
      imgHeight:
        type: integer
      imgWidth:
        type: integer
      keyLong:
        type: integer
    type: object
  config.Casbin:
    properties:
      modelPath:
        type: string
    type: object
  config.Email:
    properties:
      from:
        type: string
      host:
        type: string
      isSSL:
        type: boolean
      nickname:
        type: string
      port:
        type: integer
      secret:
        type: string
      to:
        type: string
    type: object
  config.JWT:
    properties:
      signingKey:
        type: string
    type: object
  config.Local:
    properties:
      path:
        type: string
    type: object
  config.Mysql:
    properties:
      config:
        type: string
      dbname:
        type: string
      logMode:
        type: boolean
      logZap:
        type: string
      maxIdleConns:
        type: integer
      maxOpenConns:
        type: integer
      password:
        type: string
      path:
        type: string
      username:
        type: string
    type: object
  config.Qiniu:
    properties:
      accessKey:
        type: string
      bucket:
        type: string
      imgPath:
        type: string
      secretKey:
        type: string
      useCdnDomains:
        type: boolean
      useHttps:
        type: boolean
      zone:
        type: string
    type: object
  config.Redis:
    properties:
      addr:
        type: string
      db:
        type: integer
      password:
        type: string
    type: object
  config.Server:
    properties:
      captcha:
        $ref: '#/definitions/config.Captcha'
      casbin:
        $ref: '#/definitions/config.Casbin'
      email:
        $ref: '#/definitions/config.Email'
      jwt:
        $ref: '#/definitions/config.JWT'
      local:
        $ref: '#/definitions/config.Local'
        description: oss
      mysql:
        $ref: '#/definitions/config.Mysql'
        description: gorm
      qiniu:
        $ref: '#/definitions/config.Qiniu'
      redis:
        $ref: '#/definitions/config.Redis'
      system:
        $ref: '#/definitions/config.System'
      zap:
        $ref: '#/definitions/config.Zap'
    type: object
  config.System:
    properties:
      addr:
        type: integer
      dbType:
        type: string
      env:
        type: string
      ossType:
        type: string
      useMultipoint:
        type: boolean
    type: object
  config.Zap:
    properties:
      director:
        type: string
      encodeLevel:
        type: string
      format:
        type: string
      level:
        type: string
      linkName:
        type: string
      logInConsole:
        type: boolean
      prefix:
        type: string
      showLine:
        type: boolean
      stacktraceKey:
        type: string
    type: object
  model.AutoCodeStruct:
    properties:
      abbreviation:
        type: string
      autoCreateApiToSql:
        type: boolean
      autoMoveFile:
        type: boolean
      description:
        type: string
      fields:
        items:
          $ref: '#/definitions/model.Field'
        type: array
      packageName:
        type: string
      structName:
        type: string
      tableName:
        type: string
    type: object
  model.ExaFileUploadAndDownload:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      key:
        type: string
      name:
        type: string
      tag:
        type: string
      updatedAt:
        type: string
      url:
        type: string
    type: object
  model.Field:
    properties:
      columnName:
        type: string
      comment:
        type: string
      dataType:
        type: string
      dataTypeLong:
        type: string
      dictType:
        type: string
      fieldDesc:
        type: string
      fieldJson:
        type: string
      fieldName:
        type: string
      fieldSearchType:
        type: string
      fieldType:
        type: string
    type: object
  model.K8sCluster:
    properties:
      clusterName:
        type: string
      clusterVersion:
        type: number
      id:
        description: global.GVA_MODEL
        type: integer
      kubeConfig:
        type: string
    type: object
  model.K8sDeployment:
    properties:
      createTime:
        type: string
      deployment:
        type: string
      id:
        type: integer
      namespace:
        type: string
      replicas:
        type: integer
    type: object
  model.K8sNamespaces:
    properties:
      createTime:
        type: string
      id:
        type: integer
      namespace:
        type: string
      status:
        type: string
    type: object
  model.K8sNodes:
    properties:
      createTime:
        type: string
      id:
        description: global.GVA_MODEL
        type: integer
      ip:
        type: string
      nodeName:
        type: string
      resource:
        type: string
      roles:
        type: string
      status:
        type: string
      version:
        type: string
    type: object
  model.K8sPods:
    properties:
      hostIP:
        type: string
      id:
        type: integer
      line:
        type: integer
      namespace:
        type: string
      podIP:
        type: string
      podName:
        type: string
      restartCount:
        type: integer
      startTime:
        type: string
      status:
        type: string
    type: object
  model.SysApi:
    properties:
      apiGroup:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      method:
        type: string
      path:
        type: string
      updatedAt:
        type: string
    type: object
  model.SysAuthority:
    properties:
      authorityId:
        type: string
      authorityName:
        type: string
      children:
        items:
          $ref: '#/definitions/model.SysAuthority'
        type: array
      createdAt:
        type: string
      dataAuthorityId:
        items:
          $ref: '#/definitions/model.SysAuthority'
        type: array
      deletedAt:
        type: string
      menus:
        items:
          $ref: '#/definitions/model.SysBaseMenu'
        type: array
      parentId:
        type: string
      updatedAt:
        type: string
    type: object
  model.SysBaseMenu:
    properties:
      authoritys:
        items:
          $ref: '#/definitions/model.SysAuthority'
        type: array
      children:
        items:
          $ref: '#/definitions/model.SysBaseMenu'
        type: array
      component:
        type: string
      createdAt:
        type: string
      defaultMenu:
        type: boolean
      hidden:
        type: boolean
      icon:
        type: string
      id:
        type: integer
      keepAlive:
        type: boolean
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/model.SysBaseMenuParameter'
        type: array
      parentId:
        type: string
      path:
        type: string
      sort:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
    type: object
  model.SysBaseMenuParameter:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      key:
        type: string
      sysBaseMenuID:
        type: integer
      type:
        type: string
      updatedAt:
        type: string
      value:
        type: string
    type: object
  model.SysUser:
    properties:
      authority:
        $ref: '#/definitions/model.SysAuthority'
      authorityId:
        type: string
      createdAt:
        type: string
      headerImg:
        type: string
      id:
        type: integer
      nickName:
        type: string
      updatedAt:
        type: string
      userName:
        type: string
      uuid:
        type: string
    type: object
  model.System:
    properties:
      config:
        $ref: '#/definitions/config.Server'
    type: object
  request.AddMenuAuthorityInfo:
    properties:
      authorityId:
        type: string
      menus:
        items:
          $ref: '#/definitions/model.SysBaseMenu'
        type: array
    type: object
  request.CasbinInReceive:
    properties:
      authorityId:
        type: string
      casbinInfos:
        items:
          $ref: '#/definitions/request.CasbinInfo'
        type: array
    type: object
  request.CasbinInfo:
    properties:
      method:
        type: string
      path:
        type: string
    type: object
  request.ChangePasswordStruct:
    properties:
      newPassword:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  request.Empty:
    type: object
  request.GetAuthorityId:
    properties:
      authorityId:
        type: string
    type: object
  request.GetById:
    properties:
      id:
        type: number
    type: object
  request.IdsReq:
    properties:
      ids:
        items:
          type: integer
        type: array
    type: object
  request.K8sClusterSearch:
    properties:
      clusterName:
        type: string
      clusterVersion:
        type: number
      id:
        description: global.GVA_MODEL
        type: integer
      kubeConfig:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
    type: object
  request.Login:
    properties:
      captcha:
        type: string
      captchaId:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  request.PageInfo:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
    type: object
  request.SearchApiParams:
    properties:
      apiGroup:
        type: string
      createdAt:
        type: string
      desc:
        type: boolean
      description:
        type: string
      id:
        type: integer
      method:
        type: string
      orderKey:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      path:
        type: string
      updatedAt:
        type: string
    type: object
  request.SetUserAuth:
    properties:
      authorityId:
        type: string
      uuid:
        type: string
    type: object
  response.SysAuthorityCopyResponse:
    properties:
      authority:
        $ref: '#/definitions/model.SysAuthority'
      oldAuthorityId:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample Server pets
  title: Swagger Example API
  version: 0.0.1
paths:
  /api/createApi:
    post:
      consumes:
      - application/json
      parameters:
      - description: api路径, api中文描述, api组, 方法
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysApi'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建基础api
      tags:
      - SysApi
  /api/deleteApi:
    post:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysApi'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除api
      tags:
      - SysApi
  /api/getAllApis:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取所有的Api 不分页
      tags:
      - SysApi
  /api/getApiById:
    post:
      consumes:
      - application/json
      parameters:
      - description: 根据id获取api
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.GetById'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 根据id获取api
      tags:
      - SysApi
  /api/getApiList:
    post:
      consumes:
      - application/json
      parameters:
      - description: 分页获取API列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.SearchApiParams'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取API列表
      tags:
      - SysApi
  /api/updateApi:
    post:
      consumes:
      - application/json
      parameters:
      - description: api路径, api中文描述, api组, 方法
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysApi'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"修改成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建基础api
      tags:
      - SysApi
  /authority/copyAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 旧角色id, 新权限id, 新权限名, 新父角色id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/response.SysAuthorityCopyResponse'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"拷贝成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 拷贝角色
      tags:
      - Authority
  /authority/createAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 权限id, 权限名, 父角色id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysAuthority'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建角色
      tags:
      - Authority
  /authority/deleteAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 删除角色
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysAuthority'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除角色
      tags:
      - Authority
  /authority/getAuthorityList:
    post:
      consumes:
      - application/json
      parameters:
      - description: 页码, 每页大小
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取角色列表
      tags:
      - Authority
  /authority/setDataAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 设置角色资源权限
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysAuthority'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"设置成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 设置角色资源权限
      tags:
      - Authority
  /authority/updateAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 权限id, 权限名, 父角色id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysAuthority'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新角色信息
      tags:
      - Authority
  /autoCode/createTemp:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建自动代码
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.AutoCodeStruct'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"创建成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 自动代码模板
      tags:
      - AutoCode
  /autoCode/getColumn:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取当前表所有字段
      tags:
      - AutoCode
  /autoCode/getDatabase:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取当前所有数据库
      tags:
      - AutoCode
  /autoCode/getTables:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取当前数据库所有表
      tags:
      - AutoCode
  /base/captcha:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"验证码获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 生成验证码
      tags:
      - Base
  /base/login:
    post:
      parameters:
      - description: 用户名, 密码, 验证码
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.Login'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"登陆成功"}'
          schema:
            type: string
      summary: 用户登录
      tags:
      - Base
  /casbin/UpdateCasbin:
    post:
      consumes:
      - application/json
      parameters:
      - description: 权限id, 权限模型列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CasbinInReceive'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新角色api权限
      tags:
      - Casbin
  /casbin/getPolicyPathByAuthorityId:
    post:
      consumes:
      - application/json
      parameters:
      - description: 权限id, 权限模型列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.CasbinInReceive'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取权限列表
      tags:
      - Casbin
  /email/emailTest:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"发送成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 发送测试邮件
      tags:
      - System
  /fileUploadAndDownload/deleteFile:
    post:
      parameters:
      - description: 传入文件里面id即可
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.ExaFileUploadAndDownload'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除文件
      tags:
      - ExaFileUploadAndDownload
  /fileUploadAndDownload/getFileList:
    post:
      consumes:
      - application/json
      parameters:
      - description: 页码, 每页大小
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页文件列表
      tags:
      - ExaFileUploadAndDownload
  /fileUploadAndDownload/upload:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: 上传文件示例
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"上传成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 上传文件示例
      tags:
      - ExaFileUploadAndDownload
  /jwt/jsonInBlacklist:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"拉黑成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: jwt加入黑名单
      tags:
      - Jwt
  /k8sCluster/createK8sCluster:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建K8sCluster
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sCluster'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建K8sCluster
      tags:
      - K8sCluster
  /k8sCluster/deleteK8sCluster:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除K8sCluster
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sCluster'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除K8sCluster
      tags:
      - K8sCluster
  /k8sCluster/deleteK8sClusterByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除K8sCluster
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除K8sCluster
      tags:
      - K8sCluster
  /k8sCluster/findK8sCluster:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询K8sCluster
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sCluster'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询K8sCluster
      tags:
      - K8sCluster
  /k8sCluster/getK8sClusterList:
    get:
      consumes:
      - application/json
      parameters:
      - description: 分页获取K8sCluster列表
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.K8sClusterSearch'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取K8sCluster列表
      tags:
      - K8sCluster
  /k8sCluster/updateK8sCluster:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新K8sCluster
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sCluster'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新K8sCluster
      tags:
      - K8sCluster
  /k8sDeployments/createK8sDeployment:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建K8sDeployment
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sDeployment'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建K8sDeployment
      tags:
      - K8sDeployment
  /k8sDeployments/deleteK8sDeployment:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除K8sDeployment
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sDeployment'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除K8sDeployment
      tags:
      - K8sDeployment
  /k8sDeployments/deleteK8sDeploymentByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除K8sDeployment
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除K8sDeployment
      tags:
      - K8sDeployment
  /k8sDeployments/findK8sDeployment:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询K8sDeployment
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sDeployment'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询K8sDeployment
      tags:
      - K8sDeployment
  /k8sDeployments/getK8sDeploymentList:
    get:
      consumes:
      - application/json
      description: 默认获取集群ID为1的所有namespace的应用,获取指定集群的namespace的应用接口：/k8sDeployments/getK8sDeploymentList?clusterID={int}&namespace={string}
      parameters:
      - default: 1
        description: 集群ID
        in: query
        name: clusterID
        required: true
        type: integer
      - description: 命名空间
        in: query
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取K8sDeployment列表
      tags:
      - K8sDeployment
  /k8sDeployments/restartK8sDeployment:
    put:
      consumes:
      - application/json
      description: 重启应用接口：/k8sDeployments/restartK8sDeployment?namespace=xx&deployment=xx
      parameters:
      - description: 命名空间
        in: query
        name: namespace
        required: true
        type: string
      - description: 应用
        in: query
        name: deployment
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"重启应用成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 重启Deployment
      tags:
      - K8sDeployment
  /k8sDeployments/updateK8sDeployment:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新K8sDeployment
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sDeployment'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新K8sDeployment
      tags:
      - K8sDeployment
  /k8sNamespaces/createK8sNamespaces:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建K8sNamespaces
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sNamespaces'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建K8sNamespaces
      tags:
      - K8sNamespaces
  /k8sNamespaces/deleteK8sNamespaces:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除K8sNamespaces
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sNamespaces'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除K8sNamespaces
      tags:
      - K8sNamespaces
  /k8sNamespaces/deleteK8sNamespacesByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除K8sNamespaces
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除K8sNamespaces
      tags:
      - K8sNamespaces
  /k8sNamespaces/findK8sNamespaces:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询K8sNamespaces
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sNamespaces'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询K8sNamespaces
      tags:
      - K8sNamespaces
  /k8sNamespaces/getK8sNamespacesList:
    get:
      consumes:
      - application/json
      description: 默认获取集群ID为1的namespace，获取指定集群的namespace接口：/k8sNamespaces/getK8sNamespacesList?clusterID={int}
      parameters:
      - default: 1
        description: 集群ID
        in: query
        name: clusterID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取指定集群的Namespace
      tags:
      - K8sNamespaces
  /k8sNamespaces/updateK8sNamespaces:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新K8sNamespaces
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sNamespaces'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新K8sNamespaces
      tags:
      - K8sNamespaces
  /k8sNodes/createK8sNodes:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建K8sNodes
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sNodes'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建K8sNodes
      tags:
      - K8sNodes
  /k8sNodes/deleteK8sNodes:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除K8sNodes
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sNodes'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除K8sNodes
      tags:
      - K8sNodes
  /k8sNodes/deleteK8sNodesByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除K8sNodes
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除K8sNodes
      tags:
      - K8sNodes
  /k8sNodes/findK8sNodes:
    get:
      consumes:
      - application/json
      parameters:
      - description: 用id查询K8sNodes
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sNodes'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"查询成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用id查询K8sNodes
      tags:
      - K8sNodes
  /k8sNodes/getK8sNodesList:
    get:
      consumes:
      - application/json
      description: 默认获取集群ID为1的节点，获取指定集群的节点接口：/k8sNodes/getK8sNodesList?clusterID={int}
      parameters:
      - default: 1
        description: 集群ID
        in: query
        name: clusterID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取K8sNodes列表
      tags:
      - K8sNodes
  /k8sNodes/updateK8sNodes:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新K8sNodes
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sNodes'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新K8sNodes
      tags:
      - K8sNodes
  /k8sPods/createK8sPods:
    post:
      consumes:
      - application/json
      parameters:
      - description: 创建K8sPods
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sPods'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 创建K8sPods
      tags:
      - K8sPods
  /k8sPods/deleteK8sPods:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 删除K8sPods
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sPods'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除K8sPods
      tags:
      - K8sPods
  /k8sPods/deleteK8sPodsByIds:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 批量删除K8sPods
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.IdsReq'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"批量删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 批量删除K8sPods
      tags:
      - K8sPods
  /k8sPods/execPod:
    get:
      consumes:
      - application/json
      description: 调用后端接口http://127.0.0.1:8888/container/execContainer;打开前端web/src/view/kubernetes/container/terminal.html文件
      parameters:
      - description: 命名空间
        in: query
        name: namespace
        required: true
        type: string
      - description: Pod名称
        in: query
        name: podName
        required: true
        type: string
      - description: 容器名称
        in: query
        name: containerName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"进入容器终端"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 进入容器终端
      tags:
      - K8sPods
  /k8sPods/getK8sPodsList:
    get:
      consumes:
      - application/json
      description: 默认获取集群ID为1的所有namespace的容器,获取指定集群的namespace的容器接口:/k8sPods/getK8sPodsList?clusterID={int}&namespace={string}
      parameters:
      - default: 1
        description: 集群ID
        in: query
        name: clusterID
        required: true
        type: integer
      - description: 命名空间
        in: query
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取K8sPods列表
      tags:
      - K8sPods
  /k8sPods/getPodLog:
    get:
      consumes:
      - application/json
      parameters:
      - default: default
        description: 命名空间
        in: query
        name: namespace
        required: true
        type: string
      - description: 容器名称
        in: query
        name: podName
        required: true
        type: string
      - description: 日志行数
        in: query
        name: line
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取pod日志成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取pod日志
      tags:
      - K8sPods
  /k8sPods/updateK8sPods:
    put:
      consumes:
      - application/json
      parameters:
      - description: 更新K8sPods
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.K8sPods'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新K8sPods
      tags:
      - K8sPods
  /menu/GetMenuAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 角色ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.GetAuthorityId'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取指定角色menu
      tags:
      - AuthorityMenu
  /menu/addBaseMenu:
    post:
      consumes:
      - application/json
      parameters:
      - description: 路由path, 父菜单ID, 路由name, 对应前端文件路径, 排序标记
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysBaseMenu'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"添加成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 新增菜单
      tags:
      - Menu
  /menu/addMenuAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 角色ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.AddMenuAuthorityInfo'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"添加成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 增加menu和角色关联关系
      tags:
      - AuthorityMenu
  /menu/deleteBaseMenu:
    post:
      consumes:
      - application/json
      parameters:
      - description: 菜单id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.GetById'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除菜单
      tags:
      - Menu
  /menu/getBaseMenuById:
    post:
      consumes:
      - application/json
      parameters:
      - description: 菜单id
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.GetById'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 根据id获取菜单
      tags:
      - Menu
  /menu/getBaseMenuTree:
    post:
      parameters:
      - description: 空
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.Empty'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取用户动态路由
      tags:
      - AuthorityMenu
  /menu/getMenu:
    post:
      parameters:
      - description: 空
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.Empty'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取用户动态路由
      tags:
      - AuthorityMenu
  /menu/getMenuList:
    post:
      consumes:
      - application/json
      parameters:
      - description: 页码, 每页大小
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取基础menu列表
      tags:
      - Menu
  /menu/updateBaseMenu:
    post:
      consumes:
      - application/json
      parameters:
      - description: 路由path, 父菜单ID, 路由name, 对应前端文件路径, 排序标记
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysBaseMenu'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"更新成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 更新菜单
      tags:
      - Menu
  /system/ReloadSystem:
    post:
      parameters:
      - description: 重启系统
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.System'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"重启系统成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 重启系统
      tags:
      - System
  /system/getServerInfo:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取服务器信息
      tags:
      - System
  /system/getSystemConfig:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 获取配置文件内容
      tags:
      - System
  /system/setSystemConfig:
    post:
      parameters:
      - description: 设置配置文件内容
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.System'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"设置成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 设置配置文件内容
      tags:
      - System
  /user/changePassword:
    put:
      parameters:
      - description: 用户名, 原密码, 新密码
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.ChangePasswordStruct'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"修改成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 用户修改密码
      tags:
      - SysUser
  /user/deleteUser:
    delete:
      consumes:
      - application/json
      parameters:
      - description: 用户ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.GetById'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"删除成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 删除用户
      tags:
      - SysUser
  /user/getUserList:
    post:
      consumes:
      - application/json
      parameters:
      - description: 页码, 每页大小
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"获取成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 分页获取用户列表
      tags:
      - SysUser
  /user/register:
    post:
      parameters:
      - description: 用户名, 昵称, 密码, 角色ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysUser'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"注册成功"}'
          schema:
            type: string
      summary: 用户注册账号
      tags:
      - SysUser
  /user/setUserAuthority:
    post:
      consumes:
      - application/json
      parameters:
      - description: 用户UUID, 角色ID
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/request.SetUserAuth'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"修改成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 设置用户权限
      tags:
      - SysUser
  /user/setUserInfo:
    put:
      consumes:
      - application/json
      parameters:
      - description: ID, 用户名, 昵称, 头像链接
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/model.SysUser'
      produces:
      - application/json
      responses:
        "200":
          description: '{"success":true,"data":{},"msg":"设置成功"}'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: 设置用户信息
      tags:
      - SysUser
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: x-token
    type: apiKey
swagger: "2.0"
